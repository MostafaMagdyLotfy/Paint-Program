/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint.view;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Area;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import paint.controller.Context;
import paint.controller.Control;
import paint.controller.Json;
import paint.controller.XML;
import paint.model.Circle;
import paint.model.Elipse;
import paint.model.LineSegment;
import paint.model.Rect;
import paint.model.Shape;
import paint.model.Square;
import paint.model.Triangle;

/**
 *
 * @author Ramy, Mostafa, Ahmed
 */
public class view1 extends javax.swing.JFrame implements MouseListener,MouseMotionListener {
private Shape s;
private final Control c;
private Color color=Color.BLACK;
Point clickPoint;
Point clickPoint2;
int x,y;
int x1;
int y1;
int count=0;
int count2=0;
int count3=0;
Shape shape;
int coun4=0;
int count100=0;
 FileNameExtensionFilter filter = new FileNameExtensionFilter("JSON","json");
 FileNameExtensionFilter filter2 = new FileNameExtensionFilter("XML","xml");
 

    /**
     * Creates new form view
     */
    public view1() {
        initComponents();
         jLabel1.setVisible(false);
        c=Control.instance();
         c.refresh((Graphics2D) Can.getGraphics());
            clickPoint2 = new Point();
            Undo.setToolTipText("Undo");
            Redo.setToolTipText("Redo");
            LineSegment.setToolTipText("Line Segment");
            Circle.setToolTipText("Circle");
            Ellipse.setToolTipText("Ellipse");
            Triangle.setToolTipText("Triangle");
            Square.setToolTipText("Square");
            Rectangle.setToolTipText("Rectangle");
            FillColor.setToolTipText("Fill Color");
            Color3.setToolTipText("Color");
            Select.setToolTipText("Select");
            Resize.setEnabled(false);
            Move.setEnabled(false);
            Copy.setEnabled(false);
            Delete.setEnabled(false);
             Resize2.setEnabled(false);
            Move2.setEnabled(false);
            Copy2.setEnabled(false);
            Delete2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        Resize2 = new javax.swing.JMenuItem();
        Move2 = new javax.swing.JMenuItem();
        Copy2 = new javax.swing.JMenuItem();
        Delete2 = new javax.swing.JMenuItem();
        Can = new javax.swing.JPanel();
        Undo = new javax.swing.JButton();
        Redo = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        Circle = new javax.swing.JToggleButton();
        Triangle = new javax.swing.JToggleButton();
        LineSegment = new javax.swing.JToggleButton();
        Ellipse = new javax.swing.JToggleButton();
        Rectangle = new javax.swing.JToggleButton();
        Square = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        Color3 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        Select = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        FillColor = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Resize = new javax.swing.JMenuItem();
        Move = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Delete = new javax.swing.JMenuItem();

        Resize2.setText("Resize");
        Resize2.setToolTipText("");
        Resize2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resize2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Resize2);

        Move2.setText("Move");
        Move2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Move2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Move2);

        Copy2.setText("Copy");
        Copy2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Copy2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Copy2);

        Delete2.setText("Delete");
        Delete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Delete2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint");

        Can.setBackground(new java.awt.Color(255, 255, 255));
        Can.setComponentPopupMenu(jPopupMenu1);
        Can.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CanMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout CanLayout = new javax.swing.GroupLayout(Can);
        Can.setLayout(CanLayout);
        CanLayout.setHorizontalGroup(
            CanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1287, Short.MAX_VALUE)
        );
        CanLayout.setVerticalGroup(
            CanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1171, Short.MAX_VALUE)
        );

        Undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/undo.jpg"))); // NOI18N
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });

        Redo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/undo 1 1.jpg"))); // NOI18N
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonGroup1.add(Circle);
        Circle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/circle.jpg"))); // NOI18N
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });

        buttonGroup1.add(Triangle);
        Triangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/bleach.jpg"))); // NOI18N
        Triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TriangleActionPerformed(evt);
            }
        });

        buttonGroup1.add(LineSegment);
        LineSegment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/vector.jpg"))); // NOI18N
        LineSegment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LineSegment.setName(""); // NOI18N
        LineSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineSegmentActionPerformed(evt);
            }
        });

        buttonGroup1.add(Ellipse);
        Ellipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/oval-shape.jpg"))); // NOI18N
        Ellipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EllipseActionPerformed(evt);
            }
        });

        buttonGroup1.add(Rectangle);
        Rectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/rectangle.jpg"))); // NOI18N
        Rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleActionPerformed(evt);
            }
        });

        buttonGroup1.add(Square);
        Square.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/layout.jpg"))); // NOI18N
        Square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SquareActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        Color3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/color.png"))); // NOI18N
        Color3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Color3ActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        Select.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/cursor-select-icon (1).png"))); // NOI18N
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));

        FillColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/view/bucket.jpg"))); // NOI18N
        FillColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillColorActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        Resize.setText("Resize");
        Resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeActionPerformed(evt);
            }
        });
        jMenu2.add(Resize);

        Move.setText("Move");
        Move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveActionPerformed(evt);
            }
        });
        jMenu2.add(Move);

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        jMenu2.add(Copy);

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jMenu2.add(Delete);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Can, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(Undo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Redo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(FillColor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Ellipse, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LineSegment, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Rectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Circle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Triangle, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Square, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Color3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Select)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Color3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator2)
                            .addComponent(Select, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(LineSegment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Rectangle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Square, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Ellipse, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                                    .addComponent(Circle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Triangle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Redo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Undo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FillColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(Can, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Redo, Undo});

        LineSegment.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoActionPerformed
       try{
            repaint();   
            c.redo();
        c.refresh((Graphics2D) Can.getGraphics());
        
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_RedoActionPerformed

    private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed

        try{
            repaint();   
            c.undo();
        c.refresh((Graphics2D) Can.getGraphics());
        
        }catch(Exception e){
            c.refresh((Graphics2D) Can.getGraphics());
        }
     
    }//GEN-LAST:event_UndoActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
         Shape vr[]=c.getShapes();// TODO add your handling code here:
        JFileChooser input = new JFileChooser();
          input.setFileFilter(filter);
         input.setFileFilter(filter2);
         input.setAcceptAllFileFilterUsed(false);
        int result = input.showOpenDialog(this);
      Context context = null ;
        if(result==input.APPROVE_OPTION){
            if(input.getFileFilter().getDescription()=="JSON"){
            context =new Context(new Json(vr));
            context.load(input.getSelectedFile().toString());
        }
            if(input.getFileFilter().getDescription()=="XML"){
                context=new Context(new XML(vr));
                context.load(input.getSelectedFile().toString());
       List<Shape> list=        context.get();
       for(Shape vc:list)
       {vc.draw((Graphics2D) Can.getGraphics());
           c.addShape(vc);
           repaint();
           c.refresh((Graphics2D) Can.getGraphics());
       }
            
        }
        }
        
    }//GEN-LAST:event_OpenActionPerformed

    private void MoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveActionPerformed
        // TODO add your handling code here:
        jLabel1.setText("Please Select The point you want to move to");
            count =1;    
    }//GEN-LAST:event_MoveActionPerformed

    private void LineSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineSegmentActionPerformed
        // TODO add your handling code here:
        c.refresh((Graphics2D) Can.getGraphics());
                s=new LineSegment();
                s.setColor(color);
                
                     Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
    }//GEN-LAST:event_LineSegmentActionPerformed

    private void EllipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EllipseActionPerformed
        // TODO add your handling code here:
        c.refresh((Graphics2D) Can.getGraphics());
        s=new Elipse();
        s.setColor(color);
        if(FillColor.isSelected())
            s.setFillColor(color);
             Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
    }//GEN-LAST:event_EllipseActionPerformed

    private void RectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleActionPerformed
        // TODO add your handling code here:
        c.refresh((Graphics2D) Can.getGraphics());
        s=new Rect();
        s.setColor(color);
        if(FillColor.isSelected())
            s.setFillColor(color);
             Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
    }//GEN-LAST:event_RectangleActionPerformed

    private void SquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SquareActionPerformed
        // TODO add your handling code here:
        c.refresh((Graphics2D) Can.getGraphics());
        s=new Square();
        s.setColor(color);
        if(FillColor.isSelected())
            s.setFillColor(color);
             Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
    }//GEN-LAST:event_SquareActionPerformed

    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleActionPerformed
        // TODO add your handling code here:
        c.refresh((Graphics2D) Can.getGraphics());
        s=new Circle();
        s.setColor(color);
        if(FillColor.isSelected())
            s.setFillColor(color);
             Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
    }//GEN-LAST:event_CircleActionPerformed

    private void TriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TriangleActionPerformed
        // TODO add your handling code here:
        c.refresh((Graphics2D) Can.getGraphics());
        s= new Triangle();
        s.setColor(color);
        if(FillColor.isSelected())
            s.setFillColor(color);
             Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
    }//GEN-LAST:event_TriangleActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        // TODO add your handling code here:
        jLabel1.setText("Please Select The point you want to Copy to");
         count2 =1;
    }//GEN-LAST:event_CopyActionPerformed

    private void Color3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Color3ActionPerformed
        // TODO add your handling code here:
        try{
        c.refresh((Graphics2D) Can.getGraphics());
        JColorChooser jc=new JColorChooser();
       color = JColorChooser.showDialog(this,"Select Color",Color.BLACK);
       s.setColor(color);
       if(FillColor.isSelected())
           s.setFillColor(color);
        System.out.println(color);
        c.refresh((Graphics2D) Can.getGraphics());
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_Color3ActionPerformed

    private void CanMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CanMouseReleased
        // TODO add your handling code here:
          c.refresh((Graphics2D) Can.getGraphics());
        if(evt.isPopupTrigger())
       {
             c.refresh((Graphics2D) Can.getGraphics());
           jPopupMenu1.show(this,evt.getXOnScreen(),evt.getYOnScreen());
             c.refresh((Graphics2D) Can.getGraphics());
       }
          c.refresh((Graphics2D) Can.getGraphics());
    }//GEN-LAST:event_CanMouseReleased

    private void ResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeActionPerformed
          jLabel1.setText("Select the point you want to resize to");
        coun4=1;        // TODO add your handling code here:
    }//GEN-LAST:event_ResizeActionPerformed

    private void Move2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Move2ActionPerformed
        // TODO add your handling code here:
        jLabel1.setText("Please Select The point you want to move to");
        count =1;
    }//GEN-LAST:event_Move2ActionPerformed

    private void Copy2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Copy2ActionPerformed
        // TODO add your handling code here:
        jLabel1.setText("Please Select The point you want to Copy to");
         count2 =1;
    }//GEN-LAST:event_Copy2ActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
         jLabel1.setText("Select The Shape you want to Edit");
        jLabel1.setVisible(true);
        count3=1;        // TODO add your handling code here:
       
    }//GEN-LAST:event_SelectActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
 Shape vr[]=c.getShapes();        // TODO add your handling code here:
        JFileChooser input = new JFileChooser();
          input.setFileFilter(filter);
         input.setFileFilter(filter2);
         input.setAcceptAllFileFilterUsed(false);
        int result = input.showSaveDialog(this);
      Context context;
        if(result==input.APPROVE_OPTION){
            if(input.getFileFilter().getDescription()=="JSON"){
            context =new Context(new Json(vr));
            context.save(input.getSelectedFile().toString());
        }
            if(input.getFileFilter().getDescription()=="XML"){
                context=new Context(new XML(vr));
                context.save(input.getSelectedFile().toString());
            }
        }
            
         
    }//GEN-LAST:event_SaveActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        
        c.removeShape(shape);
        repaint();
        c.refresh((Graphics2D) Can.getGraphics());  
         jLabel1.setVisible(false);
         Resize.setEnabled(false);
            Move.setEnabled(false);
            Copy.setEnabled(false);
            Delete.setEnabled(false);
         Resize2.setEnabled(false);
            Move2.setEnabled(false);
            Copy2.setEnabled(false);
            Delete2.setEnabled(false);
    }//GEN-LAST:event_DeleteActionPerformed

    private void Delete2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete2ActionPerformed
        // TODO add your handling code here:
        c.removeShape(shape);
        repaint();
        c.refresh((Graphics2D) Can.getGraphics());  
         jLabel1.setVisible(false);
         Resize.setEnabled(false);
            Move.setEnabled(false);
            Copy.setEnabled(false);
            Delete.setEnabled(false);
         Resize2.setEnabled(false);
            Move2.setEnabled(false);
            Copy2.setEnabled(false);
            Delete2.setEnabled(false);
    }//GEN-LAST:event_Delete2ActionPerformed

    private void Resize2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resize2ActionPerformed
        // TODO add your handling code here:
          jLabel1.setText("Select the point you want to resize to");
        coun4=1; 
    }//GEN-LAST:event_Resize2ActionPerformed

    private void FillColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillColorActionPerformed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_FillColorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view1().setVisible(true);
                
          
            }
        });
          }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Can;
    private javax.swing.JToggleButton Circle;
    private javax.swing.JButton Color3;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Copy2;
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenuItem Delete2;
    private javax.swing.JToggleButton Ellipse;
    private javax.swing.JToggleButton FillColor;
    private javax.swing.JToggleButton LineSegment;
    private javax.swing.JMenuItem Move;
    private javax.swing.JMenuItem Move2;
    private javax.swing.JMenuItem Open;
    private javax.swing.JToggleButton Rectangle;
    private javax.swing.JButton Redo;
    private javax.swing.JMenuItem Resize;
    private javax.swing.JMenuItem Resize2;
    private javax.swing.JMenuItem Save;
    private javax.swing.JButton Select;
    private javax.swing.JToggleButton Square;
    private javax.swing.JToggleButton Triangle;
    private javax.swing.JButton Undo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
      c.refresh((Graphics2D) Can.getGraphics());
    }

   @Override
    public void mousePressed(MouseEvent me) {
  
    clickPoint = new Point(me.getPoint()); 
    
    if(count3==1)
    {
        jLabel1.setText("Please Select The Function You want from the edit menu or by pressing Right Click");
        Resize.setEnabled(true);
            Move.setEnabled(true);
            Copy.setEnabled(true);
            Delete.setEnabled(true);
             Resize2.setEnabled(true);
            Move2.setEnabled(true);
            Copy2.setEnabled(true);
            Delete2.setEnabled(true);
        Shape v[]=c.getShapes();
      int i=0;
      while(i<v.length){
        
          if (v[i].contains(me.getPoint())){
              shape=(Shape)v[i];
             
              break;
          }
          else {
              i++;
              continue;
          }
          
    }
       count3=0;
       
    }
   if(count ==1)
   { 
     System.out.println(shape.getProperties());
       shape.setPosition(me.getPoint());
       shape.draw( (Graphics2D) Can.getGraphics());    
     
        repaint();
        c.refresh((Graphics2D) Can.getGraphics());
      
   count =0;
        jLabel1.setVisible(false);
         Resize.setEnabled(false);
            Move.setEnabled(false);
            Copy.setEnabled(false);
            Delete.setEnabled(false);
         Resize2.setEnabled(false);
            Move2.setEnabled(false);
            Copy2.setEnabled(false);
            Delete2.setEnabled(false);
      
   } 
   if(count2 ==1)
   {
      
        
       try {
           shape = (Shape)shape.clone();
           
           shape.setPosition(me.getPoint());
           c.addShape(shape);
           repaint();
           count2=0;

       } catch (CloneNotSupportedException ex) {
          
       }
        
       count2=0;
         jLabel1.setVisible(false);
         Resize.setEnabled(false);
            Move.setEnabled(false);
            Copy.setEnabled(false);
            Delete.setEnabled(false);
         Resize2.setEnabled(false);
            Move2.setEnabled(false);
            Copy2.setEnabled(false);
            Delete2.setEnabled(false);
   }
      if (coun4==1)
   {
        
        try {
            shape=(Shape) shape.clone();
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(view1.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    if(shape instanceof Square)
    {
    int minX = Math.min(me.getX(), shape.getPosition().x);
    int minY = Math.min(me.getY(), shape.getPosition().y);
    int maxX = Math.max(me.getX(), shape.getPosition().x);
    int maxY = Math.max(me.getY(), shape.getPosition().y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
    
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("length",z );
    
     shape.setProperties(map);
    
  
     repaint();
 c.refresh((Graphics2D) Can.getGraphics());  
    }
   else if (shape instanceof Elipse)
 {
    
     int minX = Math.min(me.getX(), shape.getPosition().x);
    int minY = Math.min(me.getY(), shape.getPosition().y);
    int maxX = Math.max(me.getX(), shape.getPosition().x);
    int maxY = Math.max(me.getY(), shape.getPosition().y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       double z1=(double)y1;
     
      
      
     
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("radius1",z);
     shape.setProperties(map);
     map.put("radius2",z1);
      shape.setProperties(map);
    
     shape.draw((Graphics2D) Can.getGraphics());  
     repaint();
 c.refresh((Graphics2D) Can.getGraphics());}
     if (shape instanceof Circle){
    int minX = Math.min(me.getX(), shape.getPosition().x);
    int minY = Math.min(me.getY(), shape.getPosition().y);
    int maxX = Math.max(me.getX(), shape.getPosition().x);
    int maxY = Math.max(me.getY(), shape.getPosition().y);


        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       
      
      
     
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("radius",z );
    
     shape.setProperties(map);
      
     repaint();
    }
    
   else if (shape instanceof Rect)
 {
 
  int minX = Math.min(me.getX(), shape.getPosition().x);
    int minY = Math.min(me.getY(), shape.getPosition().y);
    int maxX = Math.max(me.getX(), shape.getPosition().x);
    int maxY = Math.max(me.getY(), shape.getPosition().y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       double z1=(double)y1;
       
   
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("length",z );
     shape.setProperties(map);
     map.put("width",z1);
      shape.setProperties(map);
     shape.draw((Graphics2D) Can.getGraphics());  
     repaint();
 c.refresh((Graphics2D) Can.getGraphics());}
 coun4=0; 
 jLabel1.setVisible(false);
         Resize.setEnabled(false);
            Move.setEnabled(false);
            Copy.setEnabled(false);
            Delete.setEnabled(false);
         Resize2.setEnabled(false);
            Move2.setEnabled(false);
            Copy2.setEnabled(false);
            Delete2.setEnabled(false); 
   }
     
    }

    @Override
    public void mouseReleased(MouseEvent me) {
    try{
      if(FillColor.isSelected())
          s.setFillColor(color);
        s.draw((Graphics2D) Can.getGraphics());
     
    c.addShape(s);
    c.refresh((Graphics2D) Can.getGraphics());
  
       if (Square.isSelected())
      {
          s=new Square();
      } 
      else if (Rectangle.isSelected())
      {
          s=new Rect();
      }
      else if (Circle.isSelected())
      {
         s=new Circle();
         
      }
      
      else if (Triangle.isSelected())
      {
          s=new Triangle();
      }
         else if (Ellipse.isSelected())
      {
         s=new Elipse();
       
      }
    else if(LineSegment.isSelected()) 
            s=new LineSegment();
       
    }catch(Exception e)
    {
        
    }
  
        }

    @Override
    public void mouseEntered(MouseEvent me) {
         c.refresh((Graphics2D) Can.getGraphics());
        
        //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
         c.refresh((Graphics2D) Can.getGraphics());
     //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent me) {
 try{
     if (Circle.isSelected()&&coun4==0){
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("radius",z );
    
     s.setProperties(map);
     s.setColor(color);
     if(FillColor.isSelected())
         s.setFillColor(color);
         System.out.println(s.getFillColor());
     s.draw((Graphics2D) Can.getGraphics());  
     repaint();
     c.refresh((Graphics2D) Can.getGraphics());}
 else if (Square.isSelected()&&coun4==0)
 {
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("length",z );
    
     s.setProperties(map);
     s.setColor(color);
     if(FillColor.isSelected())
            s.setFillColor(color);
     s.draw((Graphics2D) Can.getGraphics());  
     repaint();
 c.refresh((Graphics2D) Can.getGraphics());}
 
else if (Ellipse.isSelected()&&coun4==0)
 {
    
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       double z1=(double)y1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("radius1",z);
     s.setProperties(map);
     map.put("radius2",z1);
      s.setProperties(map);
      s.setColor(color);
      if(FillColor.isSelected())
            s.setFillColor(color);
     s.draw((Graphics2D) Can.getGraphics());  
     repaint();
 c.refresh((Graphics2D) Can.getGraphics());}
 else if (Rectangle.isSelected()&&coun4==0)
 {
 
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       double z1=(double)y1;
       Point p=new Point();
       p.x=x;
       p.y=y;  
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("length",z );
     s.setProperties(map);
     map.put("width", z1);
      s.setProperties(map);
      s.setColor(color);
      if(FillColor.isSelected())
            s.setFillColor(color);
     s.draw((Graphics2D) Can.getGraphics());  
     repaint();
 c.refresh((Graphics2D) Can.getGraphics());}
if (LineSegment.isSelected()&&coun4==0){

    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = clickPoint.x;
        y = clickPoint.y;
       x1=me.getX();
       y1=me.getY(); 
       
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
   Point p1=new Point();
    p1.x=x1;
       p1.y=y1;
     ((LineSegment)s).setPosition1(p1);
     s.setColor(color);
     s.draw((Graphics2D) Can.getGraphics());  
     repaint();
     c.refresh((Graphics2D) Can.getGraphics());}
if (Triangle.isSelected()){
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX ;
       y1= maxY ; 
       double z=(double)x1;
       Point p=new Point();
       p.x=x;
       p.y=y;
     
  Point p1=new Point();       
  p1.x=x1;
       p1.y=y1;
       
      Point p2=new Point();
       double d;
        d = Math.sqrt(Math.pow((x-x1),2)+Math.pow((y-y1),2));
               p2.y=y1; 
               double temp=x-Math.sqrt(Math.pow(d, 2)+Math.pow((y-y1),2));
     p2.x=(int)temp;
      s.setPosition(p);
       ((Triangle)s).setPosition2(p1);
     ((Triangle)s).setPosition3(p2);
         s.setColor(color);
         if(FillColor.isSelected())
             s.setFillColor(color);
     repaint();

     s.draw(Can.getGraphics());  
    
     c.refresh((Graphics2D)Can.getGraphics());
}
 }catch(Exception e){   
    }    }

    @Override
    public void mouseMoved(MouseEvent me) {
       
         c.refresh((Graphics2D) Can.getGraphics());
     
    }
   public Shape[] getShapes()
   {
       return c.getShapes();
   }
}
